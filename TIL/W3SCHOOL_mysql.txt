<W3SchoolS_My SQL>

1. SELECT TOP 절
- 반환할 레코드 수를 지정하는 데 사용.
- 큰 table에서 성능이 떨어지지 않도록하는 데에 유용함.

- MySQL은 다음을 위해 LIMIT 절을 지원
- Oracle은 FETCH FIRST n ROWS ONLY 및 ROWNUM을 사용.

* Syntax
- MySQL
SELECT  column_name(s) 
FROM  table_name 
WHERE  condition 
LIMIT  number ;

- Oracle
SELECT  column_name(s) 
FROM  table_name 
ORDER  BY  column_name(s) 
FETCH  FIRST number  ROWS ONLY;

SELECT  column_name(s) 
FROM  table_name 
WHERE  ROWNUM <= number ;

SELECT  * 
FROM  ( SELECT  column_name(s) FROM  table_name ORDER  BY  column_name(s) ) 
WHERE  ROWNUM <= number ;


* Example
SELECT  * FROM  Customers 
LIMIT  3 ;
-> Customers table에서 3개까지의 레코드를 조회.

SELECT  * FROM  Customers 
WHERE  Country= 'Germany' 
LIMIT  3 ;
-> Customers table에서 Country가 Germany인 행을 3개의 레코드까지 조회.



2. LIKE 연산자
- 열에서 지정된 패턴을 검색하기 위해 WHERE 절에서 사용.
- %, _와 함께 자주 사용.
  %: 0개, 1개 또는 여러 문자를 의미.
  _: 하나의 단일 문자를 의미.
-> %와 _를 조합하여 한 번에 사용하는 것도 가능.

* Syntax
SELECT  column1, column2, ... 
FROM  table_name 
WHERE  columnN  LIKE  pattern ;

- and, or 연산자와 결합하여 사용 가능.


* Uses
'a%'
: 'a'로 시작하는 데이터.

'%a'
: 'a'로 끝나는 데이터.

'%or%'
: 아무대나 or이 있는 데이터

'_r%'
: 'r'이 두 번째에 위치한 데이터.

'a_%'
: 'a'로 시작하고 2글자 이상인 데이터

'a__%'
: 'a'로 시작하는 3글자 데이터

'a%o'
: 'a'로 시작하고 'o'로 끝나는 데이터.


* Example
SELECT * FROM Customers
WHERE CustomerName LIKE 'A%';
-> Customers table에서 CustomerName 이 'a'로 시작하는 데이터 조회.

SELECT  * FROM  Customers 
WHERE  CustomerName NOT  LIKE  'a%' ;
-> Customers table에서 CustomerName 이 'a'로 시작하지 않는 데이터 조회.



3. Wild cards
문자열에서 하나 이상의 문자를 대체하는 데 사용.

* Symbol

- %
  0개 이상의 문자.
EX. bl%(퍼센트)
  bl, black, blue, blob

- _(언더바)
  단일 문자
EX. h_t
  hot, hat, hit

- [](대괄호)
  대괄호 안 단일 문자.
EX. h[oa]t
  hot, hat

- ^(캐럿)
  대괄호에 없는 모든 문자
EX. h[^oa]t
hit

- -
  지정된 범위 내의 단일 문자
EX. c[a-b]t
cat, cbt



4. IN 연산자
- WHERE 절에 여러 값을 지정 가능.
- 여러 OR 조건의 줄임말임.

* Syntax
NOT IN (): '포함되지 않은' 의미.
SELECT  column_name(s) 
FROM  table_name 
WHERE  column_name  IN  ( value1 ,  value2 , ...);

or:
SELECT  column_name(s) 
FROM  table_name 
WHERE  column_name  IN  ( SELECT  STATEMENT );


* Example
SELECT  * FROM  Customers 
WHERE  Country IN  ( 'Germany' , 'France' , 'UK' );
-> Customers  table에서 Country가 'Germany'  혹은 France 혹은 UK인 데이터 조회.

SELECT  * FROM  Customers 
WHERE  Country IN  ( SELECT  Country FROM  Suppliers);
-> Suppliers table에 Country를 가져와 Customers  table에서 Country가 동일한 데이터 조회.



5. BETWEEN 연산자
- 주어진 범위 내에서 값을 선택.
-> 값은 숫자, 텍스트 또는 날짜.
- 시작과 끝을 지정해주어야 함.

* Syntax
SELECT  column_name(s) 
FROM  table_name 
WHERE  column_name BETWEEN  value1  AND  value2;

- NOT BETWEEN도 있음.


* Example
SELECT  * FROM  Products 
WHERE  Price BETWEEN  10  AND  20 ;
-> Products  table에서 Price의 값이 10~20인 데이터 조회.(10<= Price <= 20)

SELECT  * FROM  Products 
WHERE  Price NOT  BETWEEN  10  AND  20 ;
-> Products  table에서 Price의 값이 10미만, 20초과인 데이터.(Price < 10, 20 < Price)



6. Aliases
- 테이블 또는 테이블의 열에 임시 이름을 지정.
- 해당 쿼리 기간 동안에만 존재.
- AS 키워드로 생성.

* Syntax
- Column
SELECT  column_name  AS  alias_name 
FROM  table_name;

- Table
SELECT  column_name(s) 
FROM  table_name AS  alias_name;


* Example
- Column Aliase Name 지정
SELECT  CustomerID AS  ID, CustomerName AS  Customer 
FROM  Customers;
-> Customers table에서 CustomerID  컬럼은 ID로, CustomerName  컬럼은customer로 부르고 이를 조회.

- 공백이 있게 Aliase Name 지정
SELECT  CustomerName AS  Customer, ContactName AS  [Contact Person] 
FROM  Customers;
-> Customers table에서 CustomerName  컬럼은 Customer로, ContactName  컬럼은 Contect Person으로 부르고 이를 조회.

- 열을 결합하여 그 결과를 Alias Name 지정.

SELECT  CustomerName, Address + ', '  + PostalCode + ' '  + City + ', '  + Country AS  Address 
FROM  Customers;
-> Customers; table에서 CustomerName와 Adress라는 이름의 Address , PostalCode , City , Country의 컬럼을 결합한 값을 조회.



7. SELF JOIN
https://www.w3schools.com/sql/sql_join_self.asp








==============================================
+ 코테 풀다가 검색해본 내용
1. DATE_FORMAT 함수
컬럼의 타입이 DATETIME인 경우 원하는 형태로 변경할 때 사용.
첫 번째 인자로 해당 컬럼 혹은 값을 넣고 두 번째 인자로 원하는 형태를 입력해주면 됨.

* Example
YYYY-MM-DD-HH-MM-SS => YYYY-MM-DD
SELECT DATE_FORMAT(Column1 , '%Y-%M-%D')





2. 유니온
여러 테이블을 하나의 테이블로 합칠 때 사용.
단, 두 테이블의 컬럼의수와 이름이 동일해야 함.
SELECT 구절 소괄호로 묶는 경우도 있긴 한데 안 묶는 사람도 있어서 상황에 맞게 검색해보면 좋을 것 같음!

* 중복 제거
select p_code, p_sell_price as price, p_option 
from basket 
union
select p_code, p_sell_price, p_option 
from wishlist;

* 중복값도 함께 출력
위 코드에서 UNION만 UNION ALL로 변경해주면 된다.





3. 서브쿼리
ㅁㅔ인 쿼리 안에 있는 또 다른 쿼리
-> 종속되어있음.
서브쿼리는 메인 쿼리의 컬럼에 접근 가능하지만 반대는 불가.
서브쿼리끼리도 불가.

* 주의할 점
- 서브쿼리는 소괄호로 감싸주어야 함
서브쿼리에서는 Order by 사용 불가.


* 서브쿼리 사용이 가능한 곳  
- SELECT 
- FROM 
SELECT ~
FROM TABLE (SELECT ~) AS TABLE_02
-> 서브쿼리문이 돌아간 후 그 데이터를 기준으로 TABLE_02라는 테이블이 생겼다고 생각하면 됨.
- WHERE 
- HAVING 
- ORDER BY 
- INSERT문의 VALUES 
- UPDATE문의 SET 
